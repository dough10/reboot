{"version":3,"sources":["rebooter.es6"],"names":[],"mappings":"AAAA;;;;;;IAGM,Q;AAEJ,oBAAY,MAAZ,EAAoB,cAApB,EAAoC;AAAA;;AAAA;;;AAElC,QAAI,OAAO,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,YAAM,IAAI,KAAJ,CAAU,0BAAV,CAAN;AACA;AACD;AACD,SAAK,MAAL,GAAc,MAAd;AACA,SAAK,SAAL,GAAiB,QAAQ,UAAR,CAAjB;AACA,SAAK,QAAL,GAAgB,KAAK,SAAL,CAAe,UAA/B;AACA,SAAK,QAAL,CAAc,EAAd,CAAiB,OAAjB,EAA0B,QAAQ,KAAlC;AACA,SAAK,QAAL,CAAc,IAAd,CAAmB,MAAnB,EAA2B,aAAK;AAC9B,YAAK,MAAL,CAAY,0BAAZ;AACA,YAAK,SAAL,GAAiB,KAAjB;AACA,YAAK,EAAL,GAAU,QAAQ,IAAR,CAAV;AACA,YAAK,QAAL,GAAgB,QAAQ,SAAR,CAAhB;;AAEA,YAAK,GAAL,GAAW,QAAQ,YAAR,CAAX;AACA,UAAM,WAAW,QAAQ,SAAR,CAAjB;AACA,UAAM,OAAO,UAAb;AACA,UAAM,eAAe,QAAQ,aAAR,CAArB;AACA,UAAM,UAAU,KAAK,MAAL,CAAY,OAAO,IAAnB,CAAhB;AACA,UAAM,SAAS,QAAQ,UAAR,CAAf;AACA,UAAM,YAAY,QAAQ,cAAR,CAAlB;AACA,UAAM,gBAAgB,QAAQ,eAAR,CAAtB;AACA,YAAK,OAAL,GAAe,QAAQ,WAAR,EAAqB,OAArB,CAAf;AACA,YAAK,OAAL,CAAa,EAAb,CAAgB,YAAhB,EAA8B,mBAAW;AACvC,gBAAQ,EAAR,CAAW,cAAX,EAA2B,iBAAS;AAClC,cAAI,CAAC,KAAL,EAAY;AACV,kBAAK,KAAL,CAAW,OAAX,EAAoB,gBAApB;AACA;AACD;AACD,oBAAU,MAAV,CAAiB,KAAjB,EAAwB,OAAO,OAA/B,EAAwC,UAAC,GAAD,EAAM,OAAN,EAAiB;AACvD,gBAAI,GAAJ,EAAS;AACP,oBAAK,KAAL,CAAW,OAAX,EAAoB,eAApB;AACA;AACD;AACD,gBAAI,CAAC,OAAL,EAAc;AACZ,oBAAK,KAAL,CAAW,OAAX,EAAoB,eAApB;AACA;AACD;AACD,kBAAK,aAAL,CAAmB,QAAnB,EAA6B,QAAQ,QAArC;AACD,WAVD;AAWD,SAhBD;AAiBA,gBAAQ,EAAR,CAAW,OAAX,EAAoB;AAAA,iBAAQ,MAAK,MAAL,CAAY,IAAZ,EAAkB,IAAlB,CAAuB;AAAA,mBAAS,MAAK,KAAL,CAAW,OAAX,EAAoB,KAApB,CAAT;AAAA,WAAvB,CAAR;AAAA,SAApB;AACA,gBAAQ,EAAR,CAAW,KAAX,EAAkB;AAAA,iBAAO,MAAK,QAAL,CAAc,IAAI,IAAlB,EAAwB,IAAI,IAA5B,EAAkC,IAAI,KAAtC,EAA6C,IAA7C,CAAkD;AAAA,mBAAO,MAAK,KAAL,CAAW,KAAX,EAAkB,GAAlB,CAAP;AAAA,WAAlD,CAAP;AAAA,SAAlB;AACA,gBAAQ,EAAR,CAAW,OAAX,EAAoB,iBAAS;AAC3B,gBAAK,MAAL,CAAY,OAAZ,CAAoB;AAClB,sBAAU,MAAM;AADE,WAApB,EAEG,UAAC,GAAD,EAAM,IAAN,EAAe;AAChB,gBAAI,CAAC,IAAL,EAAW;AACT,oBAAK,KAAL,CAAW,OAAX,EAAoB,cAApB;AACA;AACD;AACD,gBAAI,CAAC,OAAO,WAAP,CAAmB,MAAM,QAAzB,EAAmC,KAAK,QAAxC,CAAL,EAAwD;AACtD,oBAAK,KAAL,CAAW,OAAX,EAAoB,cAApB;AACA;AACD;AACD,gBAAI,KAAK,SAAT,EAAoB;AAClB,sBAAQ,IAAR,CAAa,WAAb;AACA;AACD;AACD,gBAAM,QAAQ,UAAU,IAAV,CAAe,IAAf,EAAqB,MAAK,MAAL,CAAY,OAAjC,EAA0C;AACtD,yBAAW;AAD2C,aAA1C,CAAd;AAGA,oBAAQ,IAAR,CAAa,OAAb,EAAsB,KAAtB;AACA,oBAAQ,IAAR,CAAa,OAAb,EAAsB,kBAAtB;AACD,WApBD;AAqBD,SAtBD;AAuBA,gBAAQ,EAAR,CAAW,WAAX,EAAwB,qBAAa;AACnC,gBAAK,MAAL,CAAY,OAAZ,CAAoB;AAClB,sBAAU,UAAU;AADF,WAApB,EAEG,UAAC,GAAD,EAAM,IAAN,EAAe;AAChB,gBAAI,CAAC,IAAL,EAAW;AACT,oBAAK,KAAL,CAAW,OAAX,EAAoB,cAApB;AACA;AACD;AACD,gBAAI,CAAC,cAAc,WAAd,CAA0B,KAAK,OAA/B,EAAwC,UAAU,IAAlD,CAAL,EAA8D;AAC5D,oBAAK,KAAL,CAAW,OAAX,EAAoB,cAApB;AACA;AACD;AACD,gBAAM,QAAQ,UAAU,IAAV,CAAe,IAAf,EAAqB,MAAK,MAAL,CAAY,OAAjC,EAA0C;AACtD,yBAAW;AAD2C,aAA1C,CAAd;AAGA,oBAAQ,IAAR,CAAa,OAAb,EAAsB,KAAtB;AACA,oBAAQ,IAAR,CAAa,OAAb,EAAsB,kBAAtB;AACD,WAhBD;AAiBD,SAlBD;AAmBA,cAAK,aAAL;AACA,cAAK,YAAL;;;AAGA,cAAK,QAAL,CAAc,cAAd,CAA6B,UAAC,GAAD,EAAM,EAAN;AAAA,iBAC3B,MAAK,KAAL,CAAW,EAAX,EAAe,IAAf,CAAoB;AAAA,mBAClB,MAAK,KAAL,CAAW,eAAX,EAA4B,GAA5B,CADkB;AAAA,WAApB,CAD2B;AAAA,SAA7B;AAGD,OArED;;AAuEA,YAAK,WAAL,GAAmB,QAAS,cAAT,CAAnB;AACA,YAAK,WAAL,CAAiB,SAAjB;;AAEA,UAAM,gBAAgB,MAAK,SAAL,CAAe,MAAf,CAAsB;AAC1C,iBAAS,MADiC;AAE1C,cAAM,MAFoC;AAG1C,cAAM;AAHoC,OAAtB,CAAtB;;AAMA,YAAK,QAAL,GAAgB,MAAK,SAAL,CAAe,KAAf,CAAqB,MAArB,EAA6B,aAA7B,CAAhB;;AAEA,YAAK,QAAL,CAAc,MAAd,GAAuB,UAAC,IAAD,EAAO,EAAP,EAAc;AACnC,YAAM,SAAS,IAAI,MAAK,QAAT,CAAkB,IAAlB,CAAf;AACA,eAAO,IAAP,CAAY,IAAZ,EAAkB,EAAlB;AACD,OAHD;;AAMA,UAAM,iBAAiB,MAAK,SAAL,CAAe,MAAf,CAAsB;AAC3C,cAAM,MADqC;AAE3C,cAAM;AAFqC,OAAtB,CAAvB;;AAKA,YAAK,SAAL,GAAiB,MAAK,SAAL,CAAe,KAAf,CAAqB,UAArB,EAAiC,cAAjC,CAAjB;;AAEA,YAAK,SAAL,CAAe,MAAf,GAAwB,UAAC,IAAD,EAAO,EAAP,EAAc;AACpC,YAAM,SAAS,IAAI,MAAK,QAAT,CAAkB,IAAlB,CAAf;AACA,eAAO,IAAP,CAAY,IAAZ,EAAkB,EAAlB;AACD,OAHD;;AAKA,UAAM,cAAc,MAAK,SAAL,CAAe,MAAf,CAAsB;AACxC,kBAAU,MAD8B;AAExC,kBAAU,MAF8B;AAGxC,iBAAS,MAH+B;AAIxC,mBAAW;AAJ6B,OAAtB,CAApB;;AAOA,YAAK,MAAL,GAAc,MAAK,SAAL,CAAe,KAAf,CAAqB,OAArB,EAA8B,WAA9B,CAAd;;AAEA,WAAK,GAAL,CAAS,cAAT;AACA,WAAK,OAAL,CAAa,cAAb;;AAEA,WAAK,GAAL,CAAS,SAAS,MAAT,CAAgB,YAAY,OAA5B,EAAqC;AAC5C,gBAAS,QAAQ,EAAT,GAAe;AADqB,OAArC,CAAT;;AAIA,WAAK,GAAL,CAAS,cAAT,EAAyB,UAAC,GAAD,EAAM,GAAN,EAAc;AACrC,YAAI,OAAO,IAAI,MAAJ,CAAW,IAAtB;AACA,YAAI,CAAC,IAAL,EAAW;AACT,cAAI,MAAJ,CAAW,GAAX,EAAgB,IAAhB,CAAqB;AACnB,oBAAQ,GADW;AAEnB,kBAAM,IAFa;AAGnB,mBAAO;AAHY,WAArB;AAKA;AACD;AACD,cAAK,MAAL,CAAY,IAAZ,EACC,IADD,CACM;AAAA,iBACJ,IAAI,MAAJ,CAAW,MAAM,MAAjB,EAAyB,IAAzB,CAA8B,KAA9B,CADI;AAAA,SADN;AAGD,OAbD;;AAgBA,WAAK,GAAL,CAAS,yBAAT,EAAoC,UAAC,GAAD,EAAM,GAAN,EAAc;AAChD,YAAI,OAAO,IAAI,MAAJ,CAAW,IAAtB;AACA,YAAI,OAAO,SAAS,IAAI,KAAJ,CAAU,IAAnB,EAAyB,EAAzB,CAAX;AACA,YAAI,QAAQ,SAAS,IAAI,KAAJ,CAAU,KAAnB,EAA0B,EAA1B,CAAZ;AACA,cAAK,QAAL,CAAc,IAAd,EAAoB,IAApB,EAA0B,KAA1B,EACC,IADD,CACM;AAAA,iBACJ,IAAI,MAAJ,CAAW,KAAK,MAAhB,EAAwB,IAAxB,CAA6B,IAA7B,CADI;AAAA,SADN;AAGD,OAPD;;AAWA,YAAK,YAAL,GAAoB,KAApB;AACA,YAAK,kBAAL,GAA0B,CAA1B;;AAEA,YAAK,UAAL,GAAkB,MAAK,MAAL,CAAY,SAA9B;AACA,YAAK,UAAL,GAAkB,EAAlB;AACA,YAAK,KAAL;AACD,KApKD;AAqKA,SAAK,SAAL,CAAe,OAAf,CAAuB,eAAe,eAAe,IAA9B,GAAqC,GAArC,GAA2C,eAAe,IAA1D,GAAiE,GAAjE,GAAuE,eAAe,EAA7G;AACD;;;;;;;;;;;iCAQY,I,EAAM;AACjB,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,UAAL,CAAgB,MAApC,EAA4C,GAA5C,EAAiD;AAC/C,YAAI,SAAS,KAAK,UAAL,CAAgB,CAAhB,CAAb,EAAiC,OAAO,IAAP;AAClC;AACD,aAAO,KAAP;AACD;;;;;;;;;;;0BAQK,I,EAAM,I,EAAM;AAChB,WAAK,OAAL,CAAa,IAAb,CAAkB,IAAlB,EAAwB,IAAxB;AACD;;;;;;;;;;2BAOM,O,EAAS;AACd,cAAQ,GAAR,CAAY,IAAI,IAAJ,GAAW,cAAX,KAA8B,MAA9B,GAAuC,OAAnD;AACD;;;;;;;;;;0BAOK,G,EAAK;AAAA;;AACT,aAAO,IAAI,OAAJ,CAAY,mBAAW;AAC5B,YAAI,QAAQ,IAAI,OAAK,WAAT,CAAqB,GAArB,CAAZ;AACA,cAAM,EAAN,CAAS,MAAT,EAAiB;AAAA,iBAAQ,QAAQ;AAC/B,qBAAS,GADsB;AAE/B,kBAAM;AAFyB,WAAR,CAAR;AAAA,SAAjB;AAIA,cAAM,EAAN,CAAS,MAAT,EAAiB;AAAA,iBAAQ,QAAQ;AAC/B,qBAAS,GADsB;AAE/B,kBAAM;AAFyB,WAAR,CAAR;AAAA,SAAjB;AAIA,mBAAW;AAAA,iBAAK,MAAM,IAAN,EAAL;AAAA,SAAX,EAA8B,IAA9B;AACD,OAXM,CAAP;AAYD;;;;;;;;mCAKc;AAAA;;AACb,aAAO,IAAI,OAAJ,CAAY,mBAAW;AAC5B,YAAM,QAAQ,OAAK,KAAL,CAAW,OAAK,MAAL,CAAY,QAAvB,EAAiC,KAAjC,CAAd;AACA,cAAM,KAAN,CAAY,CAAZ,EAAe,aAAK;AAClB,qBAAW,aAAK;AACd,mBAAK,KAAL,CAAW,OAAX,EAAoB,uBAApB;AACA,kBAAM,KAAN,CAAY,CAAZ,EAAe,aAAK;AAClB,qBAAK,MAAL,CAAY,4BAAZ;AACA;AACD,aAHD;AAID,WAND,EAMG,KANH;AAOD,SARD;AASD,OAXM,CAAP;AAYD;;;;;;;;;;;sCAQiB,I,EAAM,I,EAAM;AAAA;;AAC5B,UAAI,MAAM;AACR,cAAM,IAAI,IAAJ,GAAW,OAAX,EADE;AAER,cAAM;AAFE,OAAV;AAIA,UAAI,IAAJ,EAAU,IAAI,IAAJ,GAAW,IAAX;AACV,WAAK,SAAL,CAAe,MAAf,CAAsB,GAAtB,EAA2B;AAAA,eAAO,OAAK,aAAL,CAAmB,GAAnB,CAAP;AAAA,OAA3B;AACD;;;8BAGS;AACR,aAAQ,KAAK,EAAL,CAAQ,UAAR,CAAmB,YAAY,WAA/B,KAA+C,KAAK,eAAL,CAAqB,IAArB,CAA0B,cAA1B,CAAyC,MAAzC,CAAvD;AACD;;;;;;;;;;;kCAQa,I,EAAM,I,EAAM;AAAA;;AACxB,WAAK,YAAL,GAAoB,IAApB;AACA,WAAK,KAAL,CAAW,OAAX,EAAoB,qBAApB;AACA,UAAI,KAAK,OAAL,EAAJ,EAAoB;;;;AAIlB,YAAM,cAAc,QAAQ,YAAY,WAApB,CAApB;AACA,YAAI,CAAC,YAAY,cAAZ,CAA2B,MAA3B,CAAL,EACE,YAAY,IAAZ,GAAmB,KAAK,SAAxB;AACF,YAAI;AAAA;AACF,oBAAQ,GAAR,CAAY,WAAZ;AACA,gBAAM,MAAM,IAAI,OAAK,GAAT,CAAa,WAAb,CAAZ;AACA,gBAAI,EAAJ,CAAO,OAAP,EAAgB,eAAO;AACrB,sBAAQ,GAAR,CAAY,GAAZ;AACA,qBAAK,YAAL,GAAoB,IAApB,CAAyB;AAAA,uBAAK,OAAK,iBAAL,CAAuB,IAAvB,EAA6B,IAA7B,CAAL;AAAA,eAAzB;AACA,kBAAI,GAAJ;AACD,aAJD;AAKA,gBAAI,IAAJ,CAAS,OAAK,MAAL,CAAY,mBAArB,EAA0C;AACxC,mBAAK,UAAU,GAAV,EAAe;AAAA;;AAClB,wBAAQ,GAAR,CAAY,GAAZ;AACA,qBAAK,YAAL,GAAoB,IAApB,CAAyB;AAAA,yBAAK,OAAK,iBAAL,CAAuB,IAAvB,EAA6B,IAA7B,CAAL;AAAA,iBAAzB;AACA,oBAAI,GAAJ;AACD,eALuC;AAMxC,mBAAK,UAAU,MAAV,EAAmB;AACtB,qBAAK,MAAL,CAAY,qCAAZ;AACA,qBAAK,iBAAL,CAAuB,IAAvB,EAA6B,IAA7B;AACA,oBAAI,GAAJ;AACA,wBAAQ,GAAR,CAAY,MAAZ;AACD,eAXuC;AAYxC,oBAAM,UAAU,IAAV,EAAgB;AACpB,wBAAQ,GAAR,CAAY,IAAZ;AACD;AAduC,aAA1C,EAeG,KAfH;AARE;AAwBH,SAxBD,CAwBE,OAAO,CAAP,EAAU;AACV,kBAAQ,GAAR,CAAY,CAAZ;AACA,eAAK,YAAL,GAAoB,IAApB,CAAyB;AAAA,mBAAK,OAAK,iBAAL,CAAuB,IAAvB,EAA6B,IAA7B,CAAL;AAAA,WAAzB;AACD;AACF,OAnCD,MAmCO,IAAI,CAAC,KAAK,eAAL,CAAqB,IAArB,CAA0B,cAA1B,CAAyC,MAAzC,CAAL,EAAuD;;AAE5D,aAAK,YAAL,GAAoB,IAApB,CAAyB;AAAA,iBAAK,OAAK,iBAAL,CAAuB,IAAvB,EAA6B,IAA7B,CAAL;AAAA,SAAzB;AACD,OAHM,MAGA;AACL,aAAK,YAAL,GAAoB,IAApB,CAAyB;AAAA,iBAAK,OAAK,iBAAL,CAAuB,IAAvB,EAA6B,IAA7B,CAAL;AAAA,SAAzB;AACD;AACF;;;;;;;;;;kCAOa,K,EAAO;AACnB,UAAI,QAAQ,CAAZ;AACA,UAAM,QAAQ,MAAM,MAApB;AACA,UAAI,YAAY,CAAhB;AACA,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAApB,EAA2B,GAA3B,EAAgC;AAC9B,YAAI,CAAC,MAAM,CAAN,EAAS,IAAd,EAAoB;AAClB;AACA,eAAK,MAAL,CAAY,qBAAqB,MAAM,CAAN,EAAS,OAA1C;AACD;AACD,YAAI,MAAM,CAAN,EAAS,IAAT,CAAc,cAAd,CAA6B,MAA7B,KAAwC,MAAM,CAAN,EAAS,IAAT,CAAc,IAAd,GAAqB,KAAK,MAAL,CAAY,OAA7E,EAAsF;AACpF;AACA,eAAK,MAAL,CAAY,MAAM,CAAN,EAAS,OAAT,GAAmB,yBAAnB,GAA+C,KAAK,MAAL,CAAY,OAAvE;AACD;AACF;;AAED,UAAI,CAAC,KAAD,IAAU,CAAC,SAAf,EACE,KAAK,MAAL,CAAY,sBAAZ;;AAEF,UAAI,QAAQ,CAAZ,EACE,KAAK,YAAL,GAAoB,KAApB;;AAEF,UAAI,KAAJ,EACE,KAAK,KAAL,CAAW,OAAX,EAAoB,QAAQ,MAAR,GAAiB,KAAK,UAAL,CAAgB,MAAjC,GAA0C,qBAA1C,GAAkE,SAAlE,GAA8E,aAAlG;;AAEF,UAAI,UAAU,KAAV,IAAmB,CAAC,KAAK,YAA7B,EACE,KAAK,aAAL,CAAmB,WAAnB;;AAEF,UAAI,aAAa,KAAK,KAAL,CAAW,KAAK,UAAL,CAAgB,MAAhB,GAAyB,CAApC,CAAb,IAAuD,CAAC,KAAK,YAAjE,EACE,KAAK,aAAL,CAAmB,WAAnB;;AAEF,cAAQ,OAAR,CAAgB,wBAAhB;;AAEA,WAAK,YAAL;AACD;;;;;;;;;;kCAOa,G,EAAK;AAAA;;AACjB,UAAI,GAAJ,EAAS,KAAK,MAAL,CAAY,GAAZ;AACT,WAAK,SAAL,CAAe,KAAf,CAAqB,EAArB,EAAyB,UAAC,GAAD,EAAM,KAAN,EAAgB;AACvC,eAAK,SAAL,CAAe,IAAf,GAAsB,IAAtB,CAA2B,EAAC,MAAM,CAAP,EAA3B,EAAsC,IAAtC,CAA4C,aAAK;AAC/C,cAAI,QAAQ,EAAZ,EAAgB;AACd,mBAAO,QAAQ,EAAf;AACD,WAFD,MAEO;AACL,mBAAO,CAAP;AACD;AACF,SAN0C,EAA3C,EAMM,IANN,CAMW,UAAC,GAAD,EAAM,IAAN;AAAA,iBAAe,OAAK,KAAL,CAAW,UAAX,EAAuB,IAAvB,CAAf;AAAA,SANX;AAOD,OARD;AASD;;;;;;;;;;iCAOY,G,EAAK;AAAA;;AAChB,UAAI,GAAJ,EAAS,KAAK,MAAL,CAAY,GAAZ;AACT,UAAI,WAAW,KAAK,MAAL,CAAY,WAAZ,GAA0B,KAAK,UAAL,CAAgB,MAAzD;AACA,WAAK,QAAL,CAAc,KAAd,CAAoB,EAApB,EAAwB,UAAC,GAAD,EAAM,KAAN,EAAgB;AACtC,YAAM,OAAQ,aAAK;AACjB,cAAI,QAAQ,QAAZ,EAAsB;AACpB,mBAAO,QAAQ,QAAf;AACD,WAFD,MAEO;AACL,mBAAO,CAAP;AACD;AACF,SANY,EAAb;AAOA,eAAK,QAAL,CAAc,IAAd,CAAmB,EAAnB,EACC,IADD,CACM,IADN,EAEC,KAFD,CAEO,QAFP,EAGC,IAHD,CAGM,UAAC,GAAD,EAAM,IAAN;AAAA,iBACJ,OAAK,KAAL,CAAW,SAAX,EAAsB,IAAtB,CADI;AAAA,SAHN;AAKD,OAbD;AAcD;;;;;;;;;;;2BAQM,I,EAAM;AAAA;;AACX,aAAO,IAAI,OAAJ,CAAY,mBAAW;AAC5B,YAAI,CAAC,OAAK,YAAL,CAAkB,IAAlB,CAAL,EAA8B;AAC5B,kBAAQ;AACN,oBAAQ,GADF;AAEN,kBAAM,IAFA;AAGN,mBAAO;AAHD,WAAR;AAKA;AACD;AACD,eAAK,QAAL,CAAc,KAAd,CAAoB;AAClB,mBAAS;AADS,SAApB,EAEG,UAAC,GAAD,EAAM,KAAN,EAAgB;AACjB,cAAI,GAAJ,EAAS;AACP,oBAAQ;AACN,sBAAQ,GADF;AAEN,oBAAM,IAFA;AAGN,qBAAO;AAHD,aAAR;AAKA;AACD;AACD,kBAAQ;AACN,oBAAQ,GADF;AAEN,kBAAM,IAFA;AAGN,mBAAO;AAHD,WAAR;AAKD,SAhBD;AAiBD,OA1BM,CAAP;AA2BD;;;;;;;;;;;;;6BAUQ,I,EAAM,I,EAAM,K,EAAO;AAAA;;AAC1B,aAAO,IAAI,OAAJ,CAAY,mBAAW;AAC5B,YAAI,CAAC,QAAK,YAAL,CAAkB,IAAlB,CAAL,EAA8B;AAC5B,kBAAQ;AACN,oBAAQ,GADF;AAEN,mBAAO,cAFD;AAGN,kBAAM;AAHA,WAAR;AAKA;AACD;AACD,gBAAK,QAAL,CAAc,IAAd,CAAmB;AACjB,mBAAS;AADQ,SAAnB,EAEG,IAFH,CAEQ,IAFR,EAEc,KAFd,CAEoB,KAFpB,EAE2B,IAF3B,CAEgC,UAAC,GAAD,EAAM,IAAN,EAAe;AAC7C,cAAI,GAAJ,EAAS;AACP,oBAAQ;AACN,sBAAQ,GADF;AAEN,qBAAO,GAFD;AAGN,oBAAM;AAHA,aAAR;AAKA;AACD;AACD,kBAAQ;AACN,oBAAQ,GADF;AAEN,qBAAS,IAFH;AAGN,kBAAM;AAHA,WAAR;AAKD,SAhBD;AAiBD,OA1BM,CAAP;AA2BD;;;;;;;;;;gCAOW,E,EAAI;AAAA;;AACd,UAAI,CAAC,KAAK,SAAV,EACE,KAAK,SAAL,GAAiB,EAAjB;AACF,iBAAW,aAAK;AACd,gBAAK,WAAL,CAAiB,EAAjB;AACD,OAFD,EAEG,KAFH;AAGA,WAAK,KAAL,CAAW,EAAX,EAAe,IAAf,CAAoB,eAAO;AACzB,YAAI,CAAC,IAAI,IAAJ,CAAS,cAAT,CAAwB,MAAxB,CAAL,EAAsC;AACpC,kBAAK,kBAAL;AACA,cAAI,QAAK,kBAAL,GAA0B,CAA9B,EACE,QAAK,aAAL,CAAmB,WAAnB;AACF;AACD;AACD,gBAAK,eAAL,GAAuB,GAAvB;AACA,gBAAK,kBAAL,GAA0B,CAA1B;AACA,gBAAK,KAAL,CAAW,eAAX,EAA4B,GAA5B;AACD,OAVD;AAWD;;;;;;;;;;8BAOS,I,EAAM;AACd,WAAK,IAAL,GAAY,IAAI,IAAJ,GAAW,OAAX,EAAZ;AACA,WAAK,QAAL,CAAc,MAAd,CAAqB,IAArB,EAA2B,eAAO;AAChC,YAAI,GAAJ,EAAS;AACP,gBAAM,IAAI,KAAJ,CAAU,GAAV,CAAN;AACA;AACD;AACF,OALD;AAMA,WAAK,UAAL,CAAgB,IAAhB,CAAqB,IAArB;AACA,UAAI,KAAK,UAAL,CAAgB,MAAhB,KAA2B,KAAK,UAAL,CAAgB,MAA/C,EAAuD,KAAK,aAAL,CAAmB,KAAK,UAAxB;AACxD;;;;;;;;4BAKO;AAAA;;AACN,UAAM,SAAS,KAAf;AACA,UAAM,UAAU,SAAS,EAAzB;;AAEA,iBAAW,KAAK,KAAL,CAAW,IAAX,CAAgB,IAAhB,CAAX,EAAkC,UAAU,KAAK,MAAL,CAAY,MAAxD;;AAEA,UAAI,KAAK,UAAL,CAAgB,MAApB,EAA4B,KAAK,UAAL,GAAkB,EAAlB;AAC5B,WAAK,MAAL,CAAY,qBAAqB,KAAK,UAAL,CAAgB,MAArC,GAA8C,YAA1D;AACA,cAAQ,IAAR,CAAa,wBAAb;;AAEA,WAAK,UAAL,CAAgB,OAAhB,CAAwB;AAAA,eACtB,QAAK,KAAL,CAAW,OAAX,EACC,IADD,CACM,QAAK,SAAL,CAAe,IAAf,SADN,CADsB;AAAA,OAAxB;AAGA,WAAK,QAAL,CAAc,cAAd,CAA6B,UAAC,GAAD,EAAM,EAAN;AAAA,eAAa,QAAK,WAAL,CAAiB,EAAjB,CAAb;AAAA,OAA7B;AACD;;;;;;AAIH,IAAM,aAAa,QAAQ,YAAY,cAApB,CAAnB;AACA,IAAM,iBAAiB,QAAQ,YAAY,gBAApB,CAAvB;AACA,IAAM,MAAM,IAAI,QAAJ,CAAa,UAAb,EAAyB,cAAzB,CAAZ","file":"rebooter.js","sourcesContent":["'use strict';\r\n\r\n\r\nclass Rebooter {\r\n\r\n  constructor(config, mongooseConfig) {\r\n    // early return of \"config\" is not a Object\r\n    if (typeof config !== 'object') {\r\n      throw new Error('Config must be an Object');\r\n      return;\r\n    }\r\n    this.config = config;\r\n    this._mongoose = require('mongoose');\r\n    this._mongodb = this._mongoose.connection;\r\n    this._mongodb.on('error', console.error);\r\n    this._mongodb.once('open', _ => {\r\n      this._print('Mongoose Connection Open');\r\n      this._routerIP = false;\r\n      this.fs = require('fs');\r\n      this._network = require('network');\r\n      //this.onoff = require('onoff').Gpio;\r\n      this.SSH = require('simple-ssh');\r\n      const _express = require('express');\r\n      const _app = _express();\r\n      const _compression = require('compression');\r\n      const _server = _app.listen(config.port);\r\n      const bcrypt = require('bcryptjs');\r\n      const tokenAuth = require('jsonwebtoken');\r\n      const authenticator = require('authenticator');\r\n      this._socket = require('socket.io')(_server);\r\n      this._socket.on('connection', _socket => {\r\n        _socket.on('force-reboot', token => {\r\n          if (!token) {\r\n            this._emit('toast', 'login required');\r\n            return;\r\n          }\r\n          tokenAuth.verify(token, config.hashKey, (err, decoded) =>{\r\n            if (err) {\r\n              this._emit('toast', 'invalid token');\r\n              return;\r\n            }\r\n            if (!decoded) {\r\n              this._emit('toast', 'invalid token');\r\n              return;\r\n            }\r\n            this._rebootRouter('manual', decoded.username);\r\n          });\r\n        });\r\n        _socket.on('count', host => this._count(host).then(count => this._emit('count', count)));\r\n        _socket.on('log', obj => this._getLogs(obj.host, obj.skip, obj.limit).then(log => this._emit('log', log)));\r\n        _socket.on('login', login => {\r\n          this._users.findOne({\r\n            username: login.username\r\n          }, (err, user) => {\r\n            if (!user) {\r\n              this._emit('toast', 'login failed');\r\n              return;\r\n            }\r\n            if (!bcrypt.compareSync(login.password, user.password)) {\r\n              this._emit('toast', 'login failed');\r\n              return;\r\n            }\r\n            if (user.twoFactor) {\r\n              _socket.emit('twoFactor');\r\n              return;\r\n            }\r\n            const token = tokenAuth.sign(user, this.config.hashKey, {\r\n              expiresIn: '24h'\r\n            });\r\n            _socket.emit('login', token);\r\n            _socket.emit('toast', 'Successful Login');\r\n          });\r\n        });\r\n        _socket.on('twoFactor', twoFactor => {\r\n          this._users.findOne({\r\n            username: twoFactor.username\r\n          }, (err, user) => {\r\n            if (!user) {\r\n              this._emit('toast', 'login failed');\r\n              return;\r\n            }\r\n            if (!authenticator.verifyToken(user.authKey, twoFactor.code)) {\r\n              this._emit('toast', 'login failed');\r\n              return;\r\n            }\r\n            const token = tokenAuth.sign(user, this.config.hashKey, {\r\n              expiresIn: '24h'\r\n            });\r\n            _socket.emit('login', token);\r\n            _socket.emit('toast', 'Successful Login');\r\n          });\r\n        });\r\n        this._pushRestarts();\r\n        this._pushHistory();\r\n        // one off ping to shorten the delay for router status\r\n        // without could take +30 seconds to get status\r\n        this._network.get_gateway_ip((err, ip) =>\r\n          this._ping(ip).then(res =>\r\n            this._emit('router-status', res)));\r\n      });\r\n\r\n      this.PingWrapper = require (\"ping-wrapper\");\r\n      this.PingWrapper.configure();\r\n\r\n      const historySchema = this._mongoose.Schema({\r\n        address: String,\r\n        data: Object,\r\n        time: Number\r\n      });\r\n\r\n      this._history = this._mongoose.model('logs', historySchema);\r\n\r\n      this._history.insert = (data, cb) => {\r\n        const insert = new this._history(data);\r\n        insert.save(data, cb);\r\n      };\r\n\r\n\r\n      const restartsSchema = this._mongoose.Schema({\r\n        time: Number,\r\n        type: String\r\n      });\r\n\r\n      this._restarts = this._mongoose.model('restarts', restartsSchema);\r\n\r\n      this._restarts.insert = (data, cb) => {\r\n        const insert = new this._history(data);\r\n        insert.save(data, cb);\r\n      };\r\n\r\n      const usersSchema = this._mongoose.Schema({\r\n        username: String,\r\n        password: String,\r\n        authKey: String,\r\n        twoFactor: Boolean\r\n      });\r\n\r\n      this._users = this._mongoose.model('users', usersSchema);\r\n\r\n      _app.use(_compression());\r\n      _app.disable('x-powered-by');\r\n\r\n      _app.use(_express.static(__dirname + '/html', {\r\n        maxAge: (60000 * 60) * 24\r\n      }));\r\n\r\n      _app.get('/count/:host', (req, res) => {\r\n        let host = req.params.host;\r\n        if (!host) {\r\n          res.status(500).send({\r\n            status: 500,\r\n            host: host,\r\n            error: 'invalid host'\r\n          });\r\n          return;\r\n        }\r\n        this._count(host)\r\n        .then(count =>\r\n          res.status(count.status).send(count));\r\n      });\r\n\r\n\r\n      _app.get('/log/:host/:skip/:limit', (req, res) => {\r\n        let host = req.params.host;\r\n        let skip = parseInt(req.param.skip, 10);\r\n        let limit = parseInt(req.param.limit, 10);\r\n        this._getLogs(host, skip, limit)\r\n        .then(logs =>\r\n          res.status(logs.status).send(logs));\r\n      });\r\n\r\n\r\n\r\n      this._hasRebooted = false;\r\n      this._failedRouterPings = 0;\r\n\r\n      this._addresses = this.config.addresses;\r\n      this._responses = [];\r\n      this.start();\r\n    });\r\n    this._mongoose.connect('mongodb://' + mongooseConfig.host + ':' + mongooseConfig.port + '/' + mongooseConfig.db);\r\n  }\r\n\r\n\r\n  /**\r\n   * check if given addres is valid\r\n   *\r\n   * @param {String} host - ip / url address\r\n   */\r\n  _isValidHost(host) {\r\n    for (let i = 0; i < this._addresses.length; i++) {\r\n      if (host === this._addresses[i]) return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * send data to client\r\n   *\r\n   * @param {String} name\r\n   * @param {???} data - any data type can be sent\r\n   */\r\n  _emit(name, data) {\r\n    this._socket.emit(name, data);\r\n  }\r\n\r\n  /**\r\n   * output to console\r\n   *\r\n   * @param {string} message - message to display\r\n   */\r\n  _print(message) {\r\n    console.log(new Date().toLocaleString() + ':   ' + message);\r\n  }\r\n\r\n  /**\r\n   * preform a ping test to a given url / address\r\n   *\r\n   * @param {String} url - url / ip to ping\r\n   */\r\n  _ping(url) {\r\n    return new Promise(resolve => {\r\n      let _ping = new this.PingWrapper(url);\r\n      _ping.on('ping', data => resolve({\r\n        address: url,\r\n        data: data\r\n      }));\r\n      _ping.on('fail', data => resolve({\r\n        address: url,\r\n        data: false\r\n      }));\r\n      setTimeout(_ => _ping.stop(), 8000);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * will kill power to the router by triggering a relay\r\n   */\r\n  _relayReboot() {\r\n    return new Promise(resolve => {\r\n      const _gpio = this.onoff(this.config.relayPin, 'out');\r\n      _gpio.write(1, _ => {\r\n        setTimeout(_ => {\r\n          this._emit('toast', 'powering on router...');\r\n          _gpio.write(0, _ => {\r\n            this._print('router rebooted with relay');\r\n            resolve();\r\n          });\r\n        }, 35000);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * log time and type of reboot\r\n   *\r\n   * @param {String} type - manual or automated\r\n   * @param {String} user - username of the user the initated the reboot\r\n   */\r\n  _enterRestartToDB(type, user) {\r\n    let obj = {\r\n      time: new Date().getTime(),\r\n      type: type\r\n    };\r\n    if (user) obj.user = user;\r\n    this._restarts.insert(obj, err => this._pushRestarts(err));\r\n  }\r\n\r\n\r\n  _canSSH() {\r\n    return (this.fs.existsSync(__dirname + '/ssh.json') && this._lastRouterPing.data.hasOwnProperty('time'));\r\n  }\r\n\r\n  /**\r\n   * reboot the router\r\n   *\r\n   * @param {String} type - manual or automated\r\n   * @param {String} user - username of the user the initated the reboot\r\n   */\r\n  _rebootRouter(type, user) {\r\n    this._hasRebooted = true;\r\n    this._emit('toast', 'rebooting router...');\r\n    if (this._canSSH()) {\r\n      // ssh file exist and last router ping was successful\r\n      // will attempt to reboot with ssh\r\n\r\n      const routerLogin = require(__dirname + '/ssh.json');\r\n      if (!routerLogin.hasOwnProperty('host'))\r\n        routerLogin.host = this._routerIP;\r\n      try {\r\n        console.log(routerLogin)\r\n        const ssh = new this.SSH(routerLogin);\r\n        ssh.on('error', err => {\r\n          console.log(err)\r\n          this._relayReboot().then(_ => this._enterRestartToDB(type, user));\r\n          ssh.end();\r\n        });\r\n        ssh.exec(this.config.routerRebootCommand, {\r\n          err: function (err) {\r\n            console.log(err)\r\n            this._relayReboot().then(_ => this._enterRestartToDB(type, user));\r\n            ssh.end();\r\n          },\r\n          out: function (stdout)  {\r\n            this._print('router rebooted with ssh connection');\r\n            this._enterRestartToDB(type, user);\r\n            ssh.end();\r\n            console.log(stdout);\r\n          },\r\n          exit: function (code) {\r\n            console.log(code);\r\n          }\r\n        }).start();\r\n      } catch (e) {\r\n        console.log(e)\r\n        this._relayReboot().then(_ => this._enterRestartToDB(type, user));\r\n      }\r\n    } else if (!this._lastRouterPing.data.hasOwnProperty('time')) {\r\n      // must be researt with relay\r\n      this._relayReboot().then(_ => this._enterRestartToDB(type, user));\r\n    } else {\r\n      this._relayReboot().then(_ => this._enterRestartToDB(type, user));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * count failed pings\r\n   *\r\n   * @param {Array} items - list of ping results\r\n   */\r\n  _countResults(items) {\r\n    let count = 0;\r\n    const total = items.length;\r\n    let highPings = 0;\r\n    for (let i = 0; i < total; i++) {\r\n      if (!items[i].data) {\r\n        count++;\r\n        this._print('ping failed for ' + items[i].address);\r\n      }\r\n      if (items[i].data.hasOwnProperty('time') && items[i].data.time > this.config.maxPing) {\r\n        highPings++;\r\n        this._print(items[i].address + ' has ping greater then ' + this.config.maxPing);\r\n      }\r\n    }\r\n    // all pings returned with good time\r\n    if (!count && !highPings)\r\n      this._print('all pings successful');\r\n    // as long as even one ping is goood\r\n    if (count > 1)\r\n      this._hasRebooted = false;\r\n    // notify front end of failed pings\r\n    if (count)\r\n      this._emit('toast', count + ' of ' + this._addresses.length + ' pings failed with ' + highPings + ' high pings');\r\n    // all pings failed\r\n    if (count === total && !this._hasRebooted)\r\n      this._rebootRouter('automated');\r\n    // half or more of the pings had high ping time\r\n    if (highPings >= Math.floor(this._addresses.length / 2) && !this._hasRebooted)\r\n      this._rebootRouter('automated');\r\n    // output total time taken for pings to run to console\r\n    console.timeEnd('all pings responded in');\r\n    // update data on frontend\r\n    this._pushHistory();\r\n  }\r\n\r\n  /**\r\n   * update restarts on client\r\n   *\r\n   * @param {Error} err\r\n   */\r\n  _pushRestarts(err) {\r\n    if (err) this._print(err);\r\n    this._restarts.count({}, (err, count) => {\r\n      this._restarts.find().sort({time: 1}).skip((_ => {\r\n        if (count > 10) {\r\n          return count - 10;\r\n        } else {\r\n          return 0;\r\n        }\r\n      })()).exec((err, logs) => this._emit('restarts', logs));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * update history on client\r\n   *\r\n   * @param {Error} err\r\n   */\r\n  _pushHistory(err) {\r\n    if (err) this._print(err);\r\n    let expected = this.config.graphLength * this._addresses.length;\r\n    this._history.count({}, (err, count) => {\r\n      const skip = (_ => {\r\n        if (count > expected) {\r\n          return count - expected;\r\n        } else {\r\n          return 0;\r\n        }\r\n      })();\r\n      this._history.find({})\r\n      .skip(skip)\r\n      .limit(expected)\r\n      .exec((err, logs) =>\r\n        this._emit('history', logs));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Promise that returns a response object with\r\n   * the number of ping data points for the given host\r\n   *\r\n   * @param {String} host\r\n   */\r\n  _count(host) {\r\n    return new Promise(resolve => {\r\n      if (!this._isValidHost(host)) {\r\n        resolve({\r\n          status: 401,\r\n          host: host,\r\n          error: 'invalid host'\r\n        });\r\n        return;\r\n      }\r\n      this._history.count({\r\n        address: host\r\n      }, (err, count) => {\r\n        if (err) {\r\n          resolve({\r\n            status: 500,\r\n            host: host,\r\n            error: err\r\n          });\r\n          return;\r\n        }\r\n        resolve({\r\n          status: 200,\r\n          host: host,\r\n          count: count\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Promise that resolves a response object with ping logs\r\n   * from a given host with the provided limit & offset\r\n   *\r\n   * @param {String} host\r\n   * @param {Number} skip - offset\r\n   * @param {Number} limit\r\n   */\r\n  _getLogs(host, skip, limit) {\r\n    return new Promise(resolve => {\r\n      if (!this._isValidHost(host)) {\r\n        resolve({\r\n          status: 401,\r\n          error: 'invalid host',\r\n          host: host\r\n        });\r\n        return;\r\n      }\r\n      this._history.find({\r\n        address: host\r\n      }).skip(skip).limit(limit).exec((err, logs) => {\r\n        if (err) {\r\n          resolve({\r\n            status: 500,\r\n            error: err,\r\n            host: host\r\n          });\r\n          return;\r\n        }\r\n        resolve({\r\n          status: 200,\r\n          history: logs,\r\n          host: host\r\n        })\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * ging the given router ip every 30 seconds\r\n   *\r\n   * @param {String} - ip\r\n   */\r\n  _pingRouter(ip) {\r\n    if (!this._routerIP)\r\n      this._routerIP = ip;\r\n    setTimeout(_ => {\r\n      this._pingRouter(ip);\r\n    }, 30000);\r\n    this._ping(ip).then(res => {\r\n      if (!res.data.hasOwnProperty('time')) {\r\n        this._failedRouterPings++;\r\n        if (this._failedRouterPings > 2)\r\n          this._rebootRouter('automated');\r\n        return;\r\n      }\r\n      this._lastRouterPing = res;\r\n      this._failedRouterPings = 0;\r\n      this._emit('router-status', res);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * ping responded\r\n   *\r\n   * @param {object} data - ping response data\r\n   */\r\n  _response(data) {\r\n    data.time = new Date().getTime();\r\n    this._history.insert(data, err => {\r\n      if (err) {\r\n        throw new Error(err);\r\n        return;\r\n      }\r\n    });\r\n    this._responses.push(data);\r\n    if (this._responses.length === this._addresses.length) this._countResults(this._responses);\r\n  }\r\n\r\n  /**\r\n   * start the test\r\n   */\r\n  start() {\r\n    const oneMin = 60000;\r\n    const oneHour = oneMin * 60;\r\n    // set the timer for next\r\n    setTimeout(this.start.bind(this), oneHour * this.config.repeat);\r\n    // clear responses array if it contains results\r\n    if (this._responses.length) this._responses = [];\r\n    this._print('running ping on ' + this._addresses.length + ' addresses');\r\n    console.time('all pings responded in');\r\n    // run ping on each address in the list\r\n    this._addresses.forEach(address =>\r\n      this._ping(address)\r\n      .then(this._response.bind(this)));\r\n    this._network.get_gateway_ip((err, ip) => this._pingRouter(ip));\r\n  }\r\n\r\n}\r\n\r\nconst configFile = require(__dirname + '/config.json');\r\nconst mongooseConfig = require(__dirname + '/mongoose.json');\r\nconst app = new Rebooter(configFile, mongooseConfig);\r\n"]}